# .github/workflows/update_livetv.yml (only the relevant bits)

permissions:
  contents: write

concurrency:
  group: update-livetv
  cancel-in-progress: true

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ github.token }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Sanity check LiveTV endpoint
        env:
          LIVETV_BASE_URL: ${{ secrets.LIVETV_BASE_URL }}
        run: |
          set -e
          echo "Checking connectivity to LiveTV endpoint..."
          # Probe root; tweak path if your service exposes a health route
          curl -fsS --max-time 10 "$LIVETV_BASE_URL" >/dev/null
          echo "OK: LiveTV base URL is reachable."

      - name: Install dependencies
        run: python -m pip install --upgrade pip

      - name: Generate playlist
        env:
          LIVETV_BASE_URL: ${{ secrets.LIVETV_BASE_URL }}
        run: python livetv.py

      - name: Upload playlist artifact
        uses: actions/upload-artifact@v4
        with:
          name: livetv-playlist
          path: tivimate_playlist.m3u
          retention-days: 1

      - name: Commit and push changes
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          set -e
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git"

          git add tivimate_playlist.m3u
          if git diff --quiet --cached; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "Update TiviMate playlist [skip ci]"

          git config pull.rebase true
          git config rebase.autoStash true
          git fetch origin main
          git pull --rebase --autostash origin main

          for i in 1 2 3; do
            if git push origin HEAD:main; then
              echo "Pushed successfully."
              break
            fi
            echo "Push race detected (attempt $i). Rebasing and retrying..."
            git fetch origin main
            git pull --rebase --autostash origin main
            sleep $((RANDOM % 5 + 1))
          done
